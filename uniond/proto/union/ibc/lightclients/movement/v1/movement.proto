syntax = "proto3";
package union.ibc.lightclients.movement.v1;

option go_package = "union/ibc/lightclients/movement";
import "ibc/core/client/v1/client.proto";
import "union/ibc/lightclients/ethereum/v1/ethereum.proto";

message ClientState {
  string chain_id = 1;
  string l1_client_id = 2;
  bytes l1_contract_address = 3;
  bytes l2_contract_address = 4;
  bytes table_handle = 5;
  .ibc.core.client.v1.Height frozen_height = 6;
  uint64 latest_block_num = 7;
}

message ConsensusState {
  // Aptos state root
  bytes state_root = 1;
  // Movement timestamp
  uint64 timestamp = 2;
  // Hash of the `StateProof` which is committed to l1
  bytes state_proof_hash = 3;
}

message Header {
  .ibc.core.client.v1.Height l1_height = 1;
  .ibc.core.client.v1.Height trusted_height = 2;
  StateProof state_proof = 3;
  uint64 tx_index = 4;
  TransactionInfoWithProof tx_proof = 5;
  .union.ibc.lightclients.ethereum.v1.StorageProof state_proof_hash_proof = 6;
  .union.ibc.lightclients.ethereum.v1.AccountProof settlement_contract_proof = 7;
  uint64 new_height = 8;
}

message TransactionInfoWithProof {
  repeated bytes ledger_info_to_transaction_info_proof = 1;
  TransactionInfo transaction_info = 2;
}

// NOTE(aeryz): we don't include status cause we assume success status in the light client. If it's not successfull,
// the light client will fail since the hash won't match.
message TransactionInfo {
  uint64 gas_used = 1;
  bytes transaction_hash = 2;
  bytes event_root_hash = 3;
  bytes state_change_hash = 4;
  bytes state_checkpoint_hash = 5;
  bytes state_cemetery_hash = 6;
}

message StateProof {
  LedgerInfoWithSignatures latest_li_w_sigs = 1;
  EpochChangeProof epoch_changes = 2;
}

message LedgerInfoWithSignatures {
  LedgerInfo ledger_info = 1;
  /// Aggregated BLS signature of all the validators that signed the message. The bitmask in the
  /// aggregated signature can be used to find out the individual validators signing the message
  AggregateSignature signatures = 2;
}

message LedgerInfo {
  BlockInfo commit_info = 1;
  bytes consensus_data_hash = 2;
}

message BlockInfo {
  uint64 epoch = 1;
  uint64 round = 2;
  bytes id = 3;
  bytes executed_state_id = 4;
  uint64 version = 5;
  uint64 timestamp_usecs = 6;
  EpochState next_epoch_state = 7;
}

message EpochState {
  uint64 epoch = 1;
  ValidatorVerifier verifier = 2;
}

message ValidatorVerifier {
  repeated ValidatorConsensusInfo validator_infos = 1;
}

message ValidatorConsensusInfo {
  bytes address = 1;
  PublicKey public_key = 2;
  uint64 voting_power = 3;
}

message PublicKey {
  bytes pubkey = 1;
}

message AggregateSignature {
  bytes validator_bitmask = 1;
  bytes sig = 2;
}

message EpochChangeProof {
  repeated LedgerInfoWithSignatures ledger_info_with_sigs = 1;
  bool more = 2;
}

message StorageProof {
  oneof state_value {
    bytes v0 = 1;  
    StateValueWithMetadata with_metadata = 2;
  }
  SparseMerkleProof proof = 3;
}

message StateValueWithMetadata {
  bytes data = 1;
  oneof metadata {
    StateValueMetadataV0 v0 = 2;
    StateValueMetadataV1 v1 = 3;
  }
}

message StateValueMetadataV0 {
  uint64 deposit = 1;
  uint64 creation_time_usecs = 2;
}

message StateValueMetadataV1 {
  uint64 slot_deposit = 1;
  uint64 bytes_deposit = 2;
  uint64 creation_time_usecs = 3;
}

message SparseMerkleProof {
  SparseMerkleLeafNode leaf = 1;
  repeated bytes siblings = 2;
}

message SparseMerkleLeafNode {
  bytes key = 1;
  bytes value_hash = 2;
}
